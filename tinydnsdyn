#!/usr/bin/python

# Copyright 2011-2016 Felix Hanley <felix@userspace.com.au>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2, as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301  USA

import sys
import os
import base64
import crypt
import urlparse
from BaseHTTPServer import BaseHTTPRequestHandler, HTTPServer
import ssl
from optparse import OptionParser

class RequestHandler(BaseHTTPRequestHandler):
    """handle requests to BaseHTTPServer"""

    def headers_denied(self):
        self.send_response(401)
        self.send_header('Content-type', 'text/html')
        self.send_header('WWW-Authenticate', 'Basic realm=\"tinyDNSdyn\"')

    def do_GET(self):
        self.auth = Authorizer()
        self.datafile = DataFile()

        response = 'nohost'
        hosts = []
        address = self.client_address[0]
        auth_header= self.headers.getheader('Authorization')
        # get query string
        path,_,query_str = self.path.partition('?')
        query = urlparse.parse_qs(query_str)
        # only accept index requests
        if path != '/':
            response = 'notfound'
            self.send_response(404)
        elif not auth_header:
            self.headers_denied()
            response = 'badauth'
        else:
            passhash = auth_header.replace('Basic ','',1).strip()
            username,password = base64.b64decode(passhash).split(':',1)
            if self.auth.check(username, password):
                if 'hostname' not in query:
                    response = 'notfqdn'
                else:
                    # use given ip address?
                    if 'myip' in query: address = query['myip'][0]
                    # clean up all the hostnames
                    for hostlist in query['hostname']:
                        for hostname in hostlist.split(','):
                            hosts.append(hostname)
                    # update each hostname
                    for hostname in hosts:
                        if self.auth.check(username, password, hostname):
                            # make the changes to the file
                            result = self.datafile.update(address, hostname)
                            if result == 1:
                                response = 'good'
                            elif result == 0:
                                response = 'nochg'
                # successful
                self.send_response(200)

            else:
                self.headers_denied()
                response = 'badauth'

            self.datafile.commit()

        self.end_headers()
        self.wfile.write(response)
        sys.stderr.write("client: %s, status: %s\n" % (address, response))


class Authorizer:
    """Authorise the user using htpasswd file"""

    def __init__(self):
        self.filename = options.passfile
        self.entries = []
        lines = open(self.filename, 'r').readlines()
        for line in lines:
            entry = [x.strip() for x in line.split(':',2)]
            self.entries.append(entry)

    def check(self, username, password, fqdn=None):
        for entry in self.entries:
            if entry[0] == username:
                if entry[1] == crypt.crypt(password, entry[1]):
                    if fqdn == None or len(entry) == 2 or fqdn in entry[2].split(','):
                        return True

        return False


class DataFile:
    """Read and write the data file"""

    def __init__(self):
        self.changed = False
        self.lines = []
        self.datafile_path = os.path.join(options.root, options.data)
        self.tmpfile_path = os.path.join(options.root, "data.tinydnsdyn.tmp")
        self.datafile = open(self.datafile_path,"r")
        self.tmpfile = open(self.tmpfile_path,"w")

    def update(self, address, hostname):
        """update the temporary data file"""

        result = -1
        for line in self.datafile:
            if line[0] in ['+','=']:
                fields = line.split(":",3)
                # i think these prefixes should work?!
                if fields[0].lstrip("+=.*") == hostname:
                    # default ttl?
                    if len(fields) > 2:
                        tail = fields[2]
                    else:
                        tail = options.ttl

                    # retain the tail
                    if len(fields) > 3:
                        tail += ':' + fields[3]

                    if fields[1] != address:
                        line = "%s:%s:%s\n" % (fields[0],address,tail)
                        result = 1
                        self.changed = True
                    else:
                        result = 0
            self.tmpfile.write(line)
        self.tmpfile.close()
        return result

    def commit(self):
        """overwrite data file with temp one"""
        if self.changed:
            os.rename(self.tmpfile_path, self.datafile_path)
            # now run the tinydns-data prog
            errno = os.system("cd %s && make -s" % options.root)
            if errno != 0:
                raise RuntimeError("problem executing Makefile")

    def __del__(self):
        try: os.remove(self.tmpfile_path)
        except: pass


def main():

    usage = "usage: %prog [options]"
    parser = OptionParser(usage=usage)
    parser.add_option("-r", "--root", dest="root",
            help="absolute path to the tinydns data directory")
    parser.add_option("-d", "--data", dest="data",
            help="data file to update, relative to root (default: tinydnsdyn.data)")
    parser.add_option("-t", "--ttl", dest="ttl",
            help="default TTL (default: 3600)")
    parser.add_option("-a", "--address", dest="address",
            help="the address to bind to (default: all)")
    parser.add_option("-p", "--port", dest="port",
            help="the port to listen on (default: 5353)")
    parser.add_option("-f", "--passfile", dest="passfile",
            help="the password file (default: htpasswd)")
    parser.add_option("-c", "--certfile", dest="certfile",
            help="the SSL certificate file")
    parser.add_option("-k", "--keyfile", dest="keyfile",
            help="the SSL key file")

    # defaults
    parser.set_defaults(
            root="/var/services/tinydns/root",
            address='',
            data="tinydnsdyn.data",
            port=5353,
            ttl=3600,
            passfile='/var/services/tinydns/htpasswd'
            )
    global options
    (options, args) = parser.parse_args()


    httpd = HTTPServer((options.address, options.port), RequestHandler)
    if options.certfile and options.keyfile:
        httpd.socket = ssl.wrap_socket(httpd.socket, certfile=certfile, keyfile=keyfile, server_side=True)
    httpd.serve_forever()


if __name__ == "__main__":
    main()
